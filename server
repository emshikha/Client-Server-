use std::net::{TcpListener, TcpStream};
use std::io::{BufRead, BufReader, Write, Error};
use std::thread;

fn handle_client(mut stream: TcpStream, client_id: usize) -> Result<(), Error> {
    println!("Client {} connected from: {}", client_id, stream.peer_addr()?);

    let cloned_stream = stream.try_clone()?;
    let mut reader = BufReader::new(cloned_stream);
    let mut buffer = String::new();

    loop {
        if reader.read_line(&mut buffer)? == 0 {
            println!("Client {} disconnected.", client_id);
            return Ok(());
        }

        let received = buffer.trim();
        println!("Message received from client {}: {}", client_id, received);

        if received == "quit" {
            println!("Client {} requested to close the connection.", client_id);
            return Ok(());
        }

        stream.write_all(received.as_bytes())?;
        buffer.clear(); 
    }
}

fn main() -> Result<(), Error> {
    let listener = TcpListener::bind("0.0.0.0:8888")?;
    println!("Server listening on port 8888");

    let mut client_id = 0;

    for stream in listener.incoming() {
        match stream {
            Err(e) => eprintln!("failed: {}", e),
            Ok(stream) => {
                client_id += 1;
                thread::spawn(move || {
                    if let Err(err) = handle_client(stream, client_id) {
                        eprintln!("Error handling client {}: {}", client_id, err);
                    }
                });
            }
        }
    }

    Ok(())
}
