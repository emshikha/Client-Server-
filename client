use std::net::TcpStream;
use std::io::{self, Read, Write, Error};


fn main() -> Result<(), Error> {
    let mut stream = TcpStream::connect("127.0.0.1:8888")?;
    println!("Connected to server on port 8888");

    loop {
        let mut input = String::new();
        io::stdin().read_line(&mut input)?;

        stream.write_all(input.as_bytes())?;
        println!("Message sent to server: {}", input.trim());

        if input.trim() == "quit" {
            break;
        }

        let mut buffer = [0; 512];
        let bytes_read = stream.read(&mut buffer)?;
        
        let received = match std::str::from_utf8(&buffer[..bytes_read]) {
            Ok(s) => s,
            Err(e) => {
                eprintln!("Error decoding UTF-8: {:?}", e);
                continue; 
            }
        };
        
        println!("Response from server: {}", received);
    }

    // Shutdown both read and write parts of the socket
    stream.shutdown(std::net::Shutdown::Both)?;
    Ok(())
}
